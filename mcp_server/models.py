# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:27:04+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, confloat, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class BadRequestException(RootModel[Any]):
    root: Any


class BucketName(RootModel[constr(pattern=r'\S+', min_length=3, max_length=63)]):
    root: constr(pattern=r'\S+', min_length=3, max_length=63)


class BucketPrefix(RootModel[constr(pattern=r'.*', max_length=512)]):
    root: constr(pattern=r'.*', max_length=512)


class ConflictResolvingModel(Enum):
    RECENCY = 'RECENCY'
    SOURCE = 'SOURCE'


class ConnectorProfileName(RootModel[constr(pattern=r'[\w/!@#+=.-]+', max_length=256)]):
    root: constr(pattern=r'[\w/!@#+=.-]+', max_length=256)


class DataPullMode(Enum):
    Incremental = 'Incremental'
    Complete = 'Complete'


class Date(RootModel[datetime]):
    root: datetime


class DatetimeTypeFieldName(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class DeleteDomainRequest(BaseModel):
    pass


class DeleteProfileObjectTypeRequest(BaseModel):
    pass


class DeleteWorkflowRequest(BaseModel):
    pass


class DeleteWorkflowResponse(BaseModel):
    pass


class DestinationField(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class Double(RootModel[float]):
    root: float


class Double0To1(RootModel[confloat(ge=0.0, le=1.0)]):
    root: confloat(ge=0.0, le=1.0)


class FieldContentType(Enum):
    STRING = 'STRING'
    NUMBER = 'NUMBER'
    PHONE_NUMBER = 'PHONE_NUMBER'
    EMAIL_ADDRESS = 'EMAIL_ADDRESS'
    NAME = 'NAME'


class FlowDescription(RootModel[constr(pattern=r'[\w!@#\-.?,\s]*', max_length=2048)]):
    root: constr(pattern=r'[\w!@#\-.?,\s]*', max_length=2048)


class FlowName(RootModel[constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256)]):
    root: constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256)


class Gender(Enum):
    MALE = 'MALE'
    FEMALE = 'FEMALE'
    UNSPECIFIED = 'UNSPECIFIED'


class GetDomainRequest(BaseModel):
    pass


class GetIdentityResolutionJobRequest(BaseModel):
    pass


class GetMatchesRequest(BaseModel):
    pass


class GetProfileObjectTypeRequest(BaseModel):
    pass


class GetProfileObjectTypeTemplateRequest(BaseModel):
    pass


class GetWorkflowRequest(BaseModel):
    pass


class GetWorkflowStepsRequest(BaseModel):
    pass


class IdentityResolutionJobStatus(Enum):
    PENDING = 'PENDING'
    PREPROCESSING = 'PREPROCESSING'
    FIND_MATCHING = 'FIND_MATCHING'
    MERGING = 'MERGING'
    COMPLETED = 'COMPLETED'
    PARTIAL_SUCCESS = 'PARTIAL_SUCCESS'
    FAILED = 'FAILED'


class IncrementalPullConfig(BaseModel):
    DatetimeTypeFieldName_1: Optional[DatetimeTypeFieldName] = Field(
        None, alias='DatetimeTypeFieldName'
    )


class InternalServerException(RootModel[Any]):
    root: Any


class JobScheduleDayOfTheWeek(Enum):
    SUNDAY = 'SUNDAY'
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'


class JobScheduleTime(
    RootModel[
        constr(
            pattern=r'^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$',
            min_length=3,
            max_length=5,
        )
    ]
):
    root: constr(
        pattern=r'^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$', min_length=3, max_length=5
    )


class KmsArn(
    RootModel[
        constr(pattern=r'arn:aws:kms:.*:[0-9]+:.*', min_length=20, max_length=2048)
    ]
):
    root: constr(pattern=r'arn:aws:kms:.*:[0-9]+:.*', min_length=20, max_length=2048)


class ListDomainsRequest(BaseModel):
    pass


class ListIdentityResolutionJobsRequest(BaseModel):
    pass


class ListIntegrationsRequest(BaseModel):
    pass


class ListProfileObjectTypeTemplatesRequest(BaseModel):
    pass


class ListProfileObjectTypesRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MarketoConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class Object(RootModel[constr(pattern=r'\S+', max_length=512)]):
    root: constr(pattern=r'\S+', max_length=512)


class OperatorPropertiesKeys(Enum):
    VALUE = 'VALUE'
    VALUES = 'VALUES'
    DATA_TYPE = 'DATA_TYPE'
    UPPER_BOUND = 'UPPER_BOUND'
    LOWER_BOUND = 'LOWER_BOUND'
    SOURCE_DATA_TYPE = 'SOURCE_DATA_TYPE'
    DESTINATION_DATA_TYPE = 'DESTINATION_DATA_TYPE'
    VALIDATION_ACTION = 'VALIDATION_ACTION'
    MASK_VALUE = 'MASK_VALUE'
    MASK_LENGTH = 'MASK_LENGTH'
    TRUNCATE_LENGTH = 'TRUNCATE_LENGTH'
    MATH_OPERATION_FIELDS_ORDER = 'MATH_OPERATION_FIELDS_ORDER'
    CONCAT_FORMAT = 'CONCAT_FORMAT'
    SUBFIELD_CATEGORY_MAP = 'SUBFIELD_CATEGORY_MAP'


class PartyType(Enum):
    INDIVIDUAL = 'INDIVIDUAL'
    BUSINESS = 'BUSINESS'
    OTHER = 'OTHER'


class Property(RootModel[constr(pattern=r'.+', max_length=2048)]):
    root: constr(pattern=r'.+', max_length=2048)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RoleArn(RootModel[constr(pattern=r'arn:aws:iam:.*:[0-9]+:.*', max_length=512)]):
    root: constr(pattern=r'arn:aws:iam:.*:[0-9]+:.*', max_length=512)


class S3ConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class S3SourceProperties(BaseModel):
    BucketName_1: BucketName = Field(..., alias='BucketName')
    BucketPrefix_1: Optional[BucketPrefix] = Field(None, alias='BucketPrefix')


class SalesforceConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    LESS_THAN = 'LESS_THAN'
    CONTAINS = 'CONTAINS'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class ScheduleExpression(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class ScheduleOffset(RootModel[conint(ge=0, le=36000)]):
    root: conint(ge=0, le=36000)


class ServiceNowConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    CONTAINS = 'CONTAINS'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    BETWEEN = 'BETWEEN'
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO'
    EQUAL_TO = 'EQUAL_TO'
    NOT_EQUAL_TO = 'NOT_EQUAL_TO'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class ServiceNowSourceProperties(BaseModel):
    Object_1: Object = Field(..., alias='Object')


class SourceConnectorType(Enum):
    Salesforce = 'Salesforce'
    Marketo = 'Marketo'
    Zendesk = 'Zendesk'
    Servicenow = 'Servicenow'
    S3 = 'S3'


class StandardIdentifier(Enum):
    PROFILE = 'PROFILE'
    ASSET = 'ASSET'
    CASE = 'CASE'
    UNIQUE = 'UNIQUE'
    SECONDARY = 'SECONDARY'
    LOOKUP_ONLY = 'LOOKUP_ONLY'
    NEW_ONLY = 'NEW_ONLY'
    ORDER = 'ORDER'


class StandardIdentifierList(RootModel[List[StandardIdentifier]]):
    root: List[StandardIdentifier]


class Status(Enum):
    NOT_STARTED = 'NOT_STARTED'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'
    SPLIT = 'SPLIT'
    RETRY = 'RETRY'
    CANCELLED = 'CANCELLED'


class TagArn(RootModel[constr(pattern=r'^arn:[a-z0-9]{1,10}:profile', max_length=256)]):
    root: constr(pattern=r'^arn:[a-z0-9]{1,10}:profile', max_length=256)


class TagKey(
    RootModel[
        constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class TaskPropertiesMap(RootModel[Optional[Dict[str, Property]]]):
    root: Optional[Dict[str, Property]] = None


class TaskType(Enum):
    Arithmetic = 'Arithmetic'
    Filter = 'Filter'
    Map = 'Map'
    Mask = 'Mask'
    Merge = 'Merge'
    Truncate = 'Truncate'
    Validate = 'Validate'


class ThrottlingException(RootModel[Any]):
    root: Any


class Timezone(RootModel[constr(pattern=r'.*', max_length=256)]):
    root: constr(pattern=r'.*', max_length=256)


class TriggerType(Enum):
    Scheduled = 'Scheduled'
    Event = 'Event'
    OnDemand = 'OnDemand'


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class WorkflowType(Enum):
    APPFLOW_INTEGRATION = 'APPFLOW_INTEGRATION'


class ZendeskConnectorOperator(Enum):
    PROJECTION = 'PROJECTION'
    GREATER_THAN = 'GREATER_THAN'
    ADDITION = 'ADDITION'
    MULTIPLICATION = 'MULTIPLICATION'
    DIVISION = 'DIVISION'
    SUBTRACTION = 'SUBTRACTION'
    MASK_ALL = 'MASK_ALL'
    MASK_FIRST_N = 'MASK_FIRST_N'
    MASK_LAST_N = 'MASK_LAST_N'
    VALIDATE_NON_NULL = 'VALIDATE_NON_NULL'
    VALIDATE_NON_ZERO = 'VALIDATE_NON_ZERO'
    VALIDATE_NON_NEGATIVE = 'VALIDATE_NON_NEGATIVE'
    VALIDATE_NUMERIC = 'VALIDATE_NUMERIC'
    NO_OP = 'NO_OP'


class ZendeskSourceProperties(BaseModel):
    Object_1: Object = Field(..., alias='Object')


class Boolean(RootModel[bool]):
    root: bool


class EncryptionKey(RootModel[constr(min_length=0, max_length=255)]):
    root: constr(min_length=0, max_length=255)


class ExpirationDaysInteger(RootModel[conint(ge=1, le=1098)]):
    root: conint(ge=1, le=1098)


class LogicalOperator(Enum):
    AND = 'AND'
    OR = 'OR'


class Long(RootModel[int]):
    root: int


class MatchesNumber(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class MaxSize100(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class Message(RootModel[str]):
    root: str


class Name(RootModel[constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=64)]):
    root: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=64)


class OptionalBoolean(RootModel[bool]):
    root: bool


class S3BucketName(
    RootModel[constr(pattern=r'^[a-z0-9.-]+$', min_length=3, max_length=63)]
):
    root: constr(pattern=r'^[a-z0-9.-]+$', min_length=3, max_length=63)


class S3KeyName(RootModel[constr(pattern=r'.*', min_length=1, max_length=1024)]):
    root: constr(pattern=r'.*', min_length=1, max_length=1024)


class S3KeyNameCustomerOutputConfig(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=800)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=800)


class SqsQueueUrl(RootModel[constr(min_length=0, max_length=255)]):
    root: constr(min_length=0, max_length=255)


class String0To1000(RootModel[constr(min_length=0, max_length=1000)]):
    root: constr(min_length=0, max_length=1000)


class String0To255(RootModel[constr(min_length=0, max_length=255)]):
    root: constr(min_length=0, max_length=255)


class String1To1000(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class String1To255(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class StringTo2048(RootModel[constr(pattern=r'.*', max_length=2048)]):
    root: constr(pattern=r'.*', max_length=2048)


class StringifiedJson(RootModel[constr(min_length=1, max_length=256000)]):
    root: constr(min_length=1, max_length=256000)


class Text(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class Timestamp(RootModel[datetime]):
    root: datetime


class Token(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class TypeName(
    RootModel[
        constr(pattern=r'^[a-zA-Z_][a-zA-Z_0-9-]*$', min_length=1, max_length=255)
    ]
):
    root: constr(pattern=r'^[a-zA-Z_][a-zA-Z_0-9-]*$', min_length=1, max_length=255)


class Uuid(RootModel[constr(pattern=r'[a-f0-9]{32}')]):
    root: constr(pattern=r'[a-f0-9]{32}')


class ConflictResolution1(BaseModel):
    ConflictResolvingModel_1: Optional[ConflictResolvingModel] = Field(
        None, alias='ConflictResolvingModel'
    )
    SourceName: Optional[String1To255] = None


class DomainsDomainNameIntegrationsPostRequest(BaseModel):
    Uri: constr(min_length=1, max_length=255) = Field(
        ..., description='The URI of the S3 bucket or any other type of data source.'
    )


class DomainsDomainNameIntegrationsDeletePostRequest(BaseModel):
    Uri: constr(min_length=1, max_length=255) = Field(
        ..., description='The URI of the S3 bucket or any other type of data source.'
    )


class Address1(BaseModel):
    Address1: Optional[String1To255] = None
    Address2: Optional[String1To255] = None
    Address3: Optional[String1To255] = None
    Address4: Optional[String1To255] = None
    City: Optional[String1To255] = None
    Country: Optional[String1To255] = None
    County: Optional[String1To255] = None
    PostalCode: Optional[String1To255] = None
    Province: Optional[String1To255] = None
    State: Optional[String1To255] = None


class BillingAddress(BaseModel):
    Address1: Optional[String1To255] = None
    Address2: Optional[String1To255] = None
    Address3: Optional[String1To255] = None
    Address4: Optional[String1To255] = None
    City: Optional[String1To255] = None
    Country: Optional[String1To255] = None
    County: Optional[String1To255] = None
    PostalCode: Optional[String1To255] = None
    Province: Optional[String1To255] = None
    State: Optional[String1To255] = None


class MailingAddress(BaseModel):
    Address1: Optional[String1To255] = None
    Address2: Optional[String1To255] = None
    Address3: Optional[String1To255] = None
    Address4: Optional[String1To255] = None
    City: Optional[String1To255] = None
    Country: Optional[String1To255] = None
    County: Optional[String1To255] = None
    PostalCode: Optional[String1To255] = None
    Province: Optional[String1To255] = None
    State: Optional[String1To255] = None


class ShippingAddress(BaseModel):
    Address1: Optional[String1To255] = None
    Address2: Optional[String1To255] = None
    Address3: Optional[String1To255] = None
    Address4: Optional[String1To255] = None
    City: Optional[String1To255] = None
    Country: Optional[String1To255] = None
    County: Optional[String1To255] = None
    PostalCode: Optional[String1To255] = None
    Province: Optional[String1To255] = None
    State: Optional[String1To255] = None


class DomainsDomainNameProfilesPostRequest(BaseModel):
    AccountNumber: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='A unique account number that you have given to the customer.'
    )
    AdditionalInformation: Optional[constr(min_length=1, max_length=1000)] = Field(
        None,
        description='Any additional information relevant to the customer’s profile.',
    )
    Address: Optional[Address1] = Field(
        None,
        description='A generic address associated with the customer that is not mailing, shipping, or billing.',
    )
    Attributes: Optional[Dict[str, String1To255]] = Field(
        None, description='A key value pair of attributes of a customer profile.'
    )
    BillingAddress_1: Optional[BillingAddress] = Field(
        None,
        alias='BillingAddress',
        description='A generic address associated with the customer that is not mailing, shipping, or billing.',
    )
    BirthDate: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='The customer’s birth date. '
    )
    BusinessEmailAddress: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='The customer’s business email address.'
    )
    BusinessName: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='The name of the customer’s business.'
    )
    BusinessPhoneNumber: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='The customer’s business phone number.'
    )
    EmailAddress: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description='The customer’s email address, which has not been specified as a personal or business address. ',
    )
    FirstName: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='The customer’s first name.'
    )
    Gender_1: Optional[Gender] = Field(
        None,
        alias='Gender',
        description='The gender with which the customer identifies. ',
    )
    GenderString: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description='An alternative to <code>Gender</code> which accepts any string as input.',
    )
    HomePhoneNumber: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='The customer’s home phone number.'
    )
    LastName: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='The customer’s last name.'
    )
    MailingAddress_1: Optional[MailingAddress] = Field(
        None,
        alias='MailingAddress',
        description='A generic address associated with the customer that is not mailing, shipping, or billing.',
    )
    MiddleName: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='The customer’s middle name.'
    )
    MobilePhoneNumber: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='The customer’s mobile phone number.'
    )
    PartyType_1: Optional[PartyType] = Field(
        None,
        alias='PartyType',
        description='The type of profile used to describe the customer.',
    )
    PartyTypeString: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description='An alternative to <code>PartyType</code> which accepts any string as input.',
    )
    PersonalEmailAddress: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='The customer’s personal email address.'
    )
    PhoneNumber: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description='The customer’s phone number, which has not been specified as a mobile, home, or business number. ',
    )
    ShippingAddress_1: Optional[ShippingAddress] = Field(
        None,
        alias='ShippingAddress',
        description='A generic address associated with the customer that is not mailing, shipping, or billing.',
    )


class Address2(BaseModel):
    Address1: Optional[String0To255] = None
    Address2: Optional[String0To255] = None
    Address3: Optional[String0To255] = None
    Address4: Optional[String0To255] = None
    City: Optional[String0To255] = None
    Country: Optional[String0To255] = None
    County: Optional[String0To255] = None
    PostalCode: Optional[String0To255] = None
    Province: Optional[String0To255] = None
    State: Optional[String0To255] = None


class BillingAddress1(BaseModel):
    Address1: Optional[String0To255] = None
    Address2: Optional[String0To255] = None
    Address3: Optional[String0To255] = None
    Address4: Optional[String0To255] = None
    City: Optional[String0To255] = None
    Country: Optional[String0To255] = None
    County: Optional[String0To255] = None
    PostalCode: Optional[String0To255] = None
    Province: Optional[String0To255] = None
    State: Optional[String0To255] = None


class MailingAddress1(BaseModel):
    Address1: Optional[String0To255] = None
    Address2: Optional[String0To255] = None
    Address3: Optional[String0To255] = None
    Address4: Optional[String0To255] = None
    City: Optional[String0To255] = None
    Country: Optional[String0To255] = None
    County: Optional[String0To255] = None
    PostalCode: Optional[String0To255] = None
    Province: Optional[String0To255] = None
    State: Optional[String0To255] = None


class ShippingAddress1(BaseModel):
    Address1: Optional[String0To255] = None
    Address2: Optional[String0To255] = None
    Address3: Optional[String0To255] = None
    Address4: Optional[String0To255] = None
    City: Optional[String0To255] = None
    Country: Optional[String0To255] = None
    County: Optional[String0To255] = None
    PostalCode: Optional[String0To255] = None
    Province: Optional[String0To255] = None
    State: Optional[String0To255] = None


class DomainsDomainNameProfilesPutRequest(BaseModel):
    AccountNumber: Optional[constr(min_length=0, max_length=255)] = Field(
        None, description='A unique account number that you have given to the customer.'
    )
    AdditionalInformation: Optional[constr(min_length=0, max_length=1000)] = Field(
        None,
        description='Any additional information relevant to the customer’s profile.',
    )
    Address: Optional[Address2] = Field(
        None,
        description='Updates associated with the address properties of a customer profile.',
    )
    Attributes: Optional[Dict[str, String0To255]] = Field(
        None, description='A key value pair of attributes of a customer profile.'
    )
    BillingAddress: Optional[BillingAddress1] = Field(
        None,
        description='Updates associated with the address properties of a customer profile.',
    )
    BirthDate: Optional[constr(min_length=0, max_length=255)] = Field(
        None, description='The customer’s birth date. '
    )
    BusinessEmailAddress: Optional[constr(min_length=0, max_length=255)] = Field(
        None, description='The customer’s business email address.'
    )
    BusinessName: Optional[constr(min_length=0, max_length=255)] = Field(
        None, description='The name of the customer’s business.'
    )
    BusinessPhoneNumber: Optional[constr(min_length=0, max_length=255)] = Field(
        None, description='The customer’s business phone number.'
    )
    EmailAddress: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description='The customer’s email address, which has not been specified as a personal or business address. ',
    )
    FirstName: Optional[constr(min_length=0, max_length=255)] = Field(
        None, description='The customer’s first name.'
    )
    Gender_1: Optional[Gender] = Field(
        None,
        alias='Gender',
        description='The gender with which the customer identifies. ',
    )
    GenderString: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description='An alternative to <code>Gender</code> which accepts any string as input.',
    )
    HomePhoneNumber: Optional[constr(min_length=0, max_length=255)] = Field(
        None, description='The customer’s home phone number.'
    )
    LastName: Optional[constr(min_length=0, max_length=255)] = Field(
        None, description='The customer’s last name.'
    )
    MailingAddress: Optional[MailingAddress1] = Field(
        None,
        description='Updates associated with the address properties of a customer profile.',
    )
    MiddleName: Optional[constr(min_length=0, max_length=255)] = Field(
        None, description='The customer’s middle name.'
    )
    MobilePhoneNumber: Optional[constr(min_length=0, max_length=255)] = Field(
        None, description='The customer’s mobile phone number.'
    )
    PartyType_1: Optional[PartyType] = Field(
        None,
        alias='PartyType',
        description='The type of profile used to describe the customer.',
    )
    PartyTypeString: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description='An alternative to <code>PartyType</code> which accepts any string as input.',
    )
    PersonalEmailAddress: Optional[constr(min_length=0, max_length=255)] = Field(
        None, description='The customer’s personal email address.'
    )
    PhoneNumber: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description='The customer’s phone number, which has not been specified as a mobile, home, or business number. ',
    )
    ProfileId: constr(pattern=r'[a-f0-9]{32}') = Field(
        ..., description='The unique identifier of a customer profile.'
    )
    ShippingAddress: Optional[ShippingAddress1] = Field(
        None,
        description='Updates associated with the address properties of a customer profile.',
    )


class DomainsDomainNameProfilesDeletePostRequest(BaseModel):
    ProfileId: constr(pattern=r'[a-f0-9]{32}') = Field(
        ..., description='The unique identifier of a customer profile.'
    )


class DomainsDomainNameProfilesKeysPostRequest(BaseModel):
    KeyName: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=64) = Field(
        ...,
        description='A searchable identifier of a customer profile. The predefined keys you can use include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.',
    )
    ProfileId: constr(pattern=r'[a-f0-9]{32}') = Field(
        ..., description='The unique identifier of a customer profile.'
    )
    Values: List[String1To255] = Field(..., description='A list of key values.')


class DomainsDomainNameProfilesKeysDeletePostRequest(BaseModel):
    KeyName: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=64) = Field(
        ..., description='A searchable identifier of a customer profile.'
    )
    ProfileId: constr(pattern=r'[a-f0-9]{32}') = Field(
        ..., description='The unique identifier of a customer profile.'
    )
    Values: List[String1To255] = Field(..., description='A list of key values.')


class DomainsDomainNameProfilesObjectsPutRequest(BaseModel):
    Object: constr(min_length=1, max_length=256000) = Field(
        ..., description='A string that is serialized from a JSON object.'
    )
    ObjectTypeName: constr(
        pattern=r'^[a-zA-Z_][a-zA-Z_0-9-]*$', min_length=1, max_length=255
    ) = Field(..., description='The name of the profile object type.')


class DomainsDomainNameProfilesObjectsDeletePostRequest(BaseModel):
    ObjectTypeName: constr(
        pattern=r'^[a-zA-Z_][a-zA-Z_0-9-]*$', min_length=1, max_length=255
    ) = Field(..., description='The name of the profile object type.')
    ProfileId: constr(pattern=r'[a-f0-9]{32}') = Field(
        ..., description='The unique identifier of a customer profile.'
    )
    ProfileObjectUniqueKey: constr(min_length=1, max_length=255) = Field(
        ...,
        description='The unique identifier of the profile object generated by the service.',
    )


class DomainsDomainNameWorkflowsPostRequest(BaseModel):
    QueryEndDate: Optional[datetime] = Field(
        None, description='Retrieve workflows ended after timestamp.'
    )
    QueryStartDate: Optional[datetime] = Field(
        None, description='Retrieve workflows started after timestamp.'
    )
    Status_1: Optional[Status] = Field(
        None, alias='Status', description='Status of workflow execution.'
    )
    WorkflowType_1: Optional[WorkflowType] = Field(
        None,
        alias='WorkflowType',
        description='The type of workflow. The only supported value is APPFLOW_INTEGRATION.',
    )


class IntegrationsPostRequest(BaseModel):
    Uri: constr(min_length=1, max_length=255) = Field(
        ..., description='The URI of the S3 bucket or any other type of data source.'
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(
        ...,
        description='The tags used to organize, track, or control access for this resource.',
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class Address(BaseModel):
    Address1: Optional[String1To255] = None
    Address2: Optional[String1To255] = None
    Address3: Optional[String1To255] = None
    Address4: Optional[String1To255] = None
    City: Optional[String1To255] = None
    Country: Optional[String1To255] = None
    County: Optional[String1To255] = None
    PostalCode: Optional[String1To255] = None
    Province: Optional[String1To255] = None
    State: Optional[String1To255] = None


class AppflowIntegrationWorkflowAttributes(BaseModel):
    ConnectorProfileName_1: ConnectorProfileName = Field(
        ..., alias='ConnectorProfileName'
    )
    RoleArn: Optional[String1To255] = None
    SourceConnectorType_1: SourceConnectorType = Field(..., alias='SourceConnectorType')


class AppflowIntegrationWorkflowMetrics(BaseModel):
    RecordsProcessed: Long
    StepsCompleted: Long
    TotalSteps: Long


class AppflowIntegrationWorkflowStep(BaseModel):
    BatchRecordsEndTime: String1To255
    BatchRecordsStartTime: String1To255
    CreatedAt: Timestamp
    ExecutionMessage: String1To255
    FlowName_1: FlowName = Field(..., alias='FlowName')
    LastUpdatedAt: Timestamp
    RecordsProcessed: Long
    Status_1: Status = Field(..., alias='Status')


class AttributeSourceIdMap(RootModel[Optional[Dict[str, Uuid]]]):
    root: Optional[Dict[str, Uuid]] = None


class Attributes(RootModel[Optional[Dict[str, String1To255]]]):
    root: Optional[Dict[str, String1To255]] = None


class Batch(BaseModel):
    EndTime: Timestamp
    StartTime: Timestamp


class Batches(RootModel[List[Batch]]):
    root: List[Batch]


class ConflictResolution(BaseModel):
    ConflictResolvingModel_1: ConflictResolvingModel = Field(
        ..., alias='ConflictResolvingModel'
    )
    SourceName: Optional[String1To255] = None


class ConnectorOperator(BaseModel):
    Marketo: Optional[MarketoConnectorOperator] = None
    S3: Optional[S3ConnectorOperator] = None
    Salesforce: Optional[SalesforceConnectorOperator] = None
    ServiceNow: Optional[ServiceNowConnectorOperator] = None
    Zendesk: Optional[ZendeskConnectorOperator] = None


class CreateIntegrationWorkflowResponse(BaseModel):
    Message: String1To255
    WorkflowId: Uuid


class CreateProfileRequest(BaseModel):
    AccountNumber: Optional[String1To255] = None
    AdditionalInformation: Optional[String1To1000] = None
    Address_1: Optional[Address] = Field(None, alias='Address')
    Attributes_1: Optional[Attributes] = Field(None, alias='Attributes')
    BillingAddress: Optional[Address] = None
    BirthDate: Optional[String1To255] = None
    BusinessEmailAddress: Optional[String1To255] = None
    BusinessName: Optional[String1To255] = None
    BusinessPhoneNumber: Optional[String1To255] = None
    EmailAddress: Optional[String1To255] = None
    FirstName: Optional[String1To255] = None
    Gender_1: Optional[Gender] = Field(None, alias='Gender')
    GenderString: Optional[String1To255] = None
    HomePhoneNumber: Optional[String1To255] = None
    LastName: Optional[String1To255] = None
    MailingAddress: Optional[Address] = None
    MiddleName: Optional[String1To255] = None
    MobilePhoneNumber: Optional[String1To255] = None
    PartyType_1: Optional[PartyType] = Field(None, alias='PartyType')
    PartyTypeString: Optional[String1To255] = None
    PersonalEmailAddress: Optional[String1To255] = None
    PhoneNumber: Optional[String1To255] = None
    ShippingAddress: Optional[Address] = None


class CreateProfileResponse(BaseModel):
    ProfileId: Uuid


class DeleteDomainResponse(BaseModel):
    Message_1: Message = Field(..., alias='Message')


class DeleteIntegrationRequest(BaseModel):
    Uri: String1To255


class DeleteIntegrationResponse(BaseModel):
    Message_1: Message = Field(..., alias='Message')


class DeleteProfileKeyResponse(BaseModel):
    Message_1: Optional[Message] = Field(None, alias='Message')


class DeleteProfileObjectRequest(BaseModel):
    ObjectTypeName: TypeName
    ProfileId: Uuid
    ProfileObjectUniqueKey: String1To255


class DeleteProfileObjectResponse(BaseModel):
    Message_1: Optional[Message] = Field(None, alias='Message')


class DeleteProfileObjectTypeResponse(BaseModel):
    Message_1: Message = Field(..., alias='Message')


class DeleteProfileRequest(BaseModel):
    ProfileId: Uuid


class DeleteProfileResponse(BaseModel):
    Message_1: Optional[Message] = Field(None, alias='Message')


class DomainStats(BaseModel):
    MeteringProfileCount: Optional[Long] = None
    ObjectCount: Optional[Long] = None
    ProfileCount: Optional[Long] = None
    TotalSize: Optional[Long] = None


class FieldNameList(RootModel[List[Name]]):
    root: List[Name]


class FieldSourceProfileIds(BaseModel):
    AccountNumber: Optional[Uuid] = None
    AdditionalInformation: Optional[Uuid] = None
    Address: Optional[Uuid] = None
    Attributes: Optional[AttributeSourceIdMap] = None
    BillingAddress: Optional[Uuid] = None
    BirthDate: Optional[Uuid] = None
    BusinessEmailAddress: Optional[Uuid] = None
    BusinessName: Optional[Uuid] = None
    BusinessPhoneNumber: Optional[Uuid] = None
    EmailAddress: Optional[Uuid] = None
    FirstName: Optional[Uuid] = None
    Gender: Optional[Uuid] = None
    HomePhoneNumber: Optional[Uuid] = None
    LastName: Optional[Uuid] = None
    MailingAddress: Optional[Uuid] = None
    MiddleName: Optional[Uuid] = None
    MobilePhoneNumber: Optional[Uuid] = None
    PartyType: Optional[Uuid] = None
    PersonalEmailAddress: Optional[Uuid] = None
    PhoneNumber: Optional[Uuid] = None
    ShippingAddress: Optional[Uuid] = None


class GetAutoMergingPreviewResponse(BaseModel):
    DomainName: Name
    NumberOfMatchesInSample: Optional[Long] = None
    NumberOfProfilesInSample: Optional[Long] = None
    NumberOfProfilesWillBeMerged: Optional[Long] = None


class GetIntegrationRequest(BaseModel):
    Uri: String1To255


class JobSchedule(BaseModel):
    DayOfTheWeek: JobScheduleDayOfTheWeek
    Time: JobScheduleTime


class JobStats(BaseModel):
    NumberOfMatchesFound: Optional[Long] = None
    NumberOfMergesDone: Optional[Long] = None
    NumberOfProfilesReviewed: Optional[Long] = None


class ListAccountIntegrationsRequest(BaseModel):
    Uri: String1To255


class ListProfileObjectTypeTemplateItem(BaseModel):
    SourceName: Optional[Name] = None
    SourceObject: Optional[Name] = None
    TemplateId: Optional[Name] = None


class ListProfileObjectsItem(BaseModel):
    Object: Optional[StringifiedJson] = None
    ObjectTypeName: Optional[TypeName] = None
    ProfileObjectUniqueKey: Optional[String1To255] = None


class ListWorkflowsItem(BaseModel):
    CreatedAt: Timestamp
    LastUpdatedAt: Timestamp
    Status_1: Status = Field(..., alias='Status')
    StatusDescription: String1To255
    WorkflowId: String1To255
    WorkflowType_1: WorkflowType = Field(..., alias='WorkflowType')


class ListWorkflowsRequest(BaseModel):
    QueryEndDate: Optional[Timestamp] = None
    QueryStartDate: Optional[Timestamp] = None
    Status_1: Optional[Status] = Field(None, alias='Status')
    WorkflowType_1: Optional[WorkflowType] = Field(None, alias='WorkflowType')


class MarketoSourceProperties(BaseModel):
    Object_1: Object = Field(..., alias='Object')


class MatchingAttributes(RootModel[List[String1To255]]):
    root: List[String1To255] = Field(..., max_length=20, min_length=1)


class MatchingAttributesList(RootModel[List[MatchingAttributes]]):
    root: List[MatchingAttributes] = Field(..., max_length=10, min_length=1)


class MergeProfilesResponse(BaseModel):
    Message_1: Optional[Message] = Field(None, alias='Message')


class ObjectTypeField(BaseModel):
    ContentType: Optional[FieldContentType] = None
    Source: Optional[Text] = None
    Target: Optional[Text] = None


class ObjectTypeKey(BaseModel):
    FieldNames: Optional[FieldNameList] = None
    StandardIdentifiers: Optional[StandardIdentifierList] = None


class ObjectTypeKeyList(RootModel[List[ObjectTypeKey]]):
    root: List[ObjectTypeKey]


class ObjectTypeNames(RootModel[Optional[Dict[str, TypeName]]]):
    root: Optional[Dict[str, TypeName]] = None


class ProfileIdList(RootModel[List[Uuid]]):
    root: List[Uuid]


class ProfileIdToBeMergedList(RootModel[List[Uuid]]):
    root: List[Uuid] = Field(..., max_length=20, min_length=1)


class ProfileObjectList(RootModel[List[ListProfileObjectsItem]]):
    root: List[ListProfileObjectsItem]


class ProfileObjectTypeTemplateList(RootModel[List[ListProfileObjectTypeTemplateItem]]):
    root: List[ListProfileObjectTypeTemplateItem]


class PutProfileObjectRequest(BaseModel):
    Object: StringifiedJson
    ObjectTypeName: TypeName


class PutProfileObjectResponse(BaseModel):
    ProfileObjectUniqueKey: Optional[String1To255] = None


class S3ExportingConfig(BaseModel):
    S3BucketName_1: S3BucketName = Field(..., alias='S3BucketName')
    S3KeyName: Optional[S3KeyNameCustomerOutputConfig] = None


class S3ExportingLocation(BaseModel):
    S3BucketName_1: Optional[S3BucketName] = Field(None, alias='S3BucketName')
    S3KeyName_1: Optional[S3KeyName] = Field(None, alias='S3KeyName')


class SalesforceSourceProperties(BaseModel):
    EnableDynamicFieldUpdate: Optional[Boolean] = None
    IncludeDeletedRecords: Optional[Boolean] = None
    Object_1: Object = Field(..., alias='Object')


class ScheduledTriggerProperties(BaseModel):
    DataPullMode_1: Optional[DataPullMode] = Field(None, alias='DataPullMode')
    FirstExecutionFrom: Optional[Date] = None
    ScheduleEndTime: Optional[Date] = None
    ScheduleExpression_1: ScheduleExpression = Field(..., alias='ScheduleExpression')
    ScheduleOffset_1: Optional[ScheduleOffset] = Field(None, alias='ScheduleOffset')
    ScheduleStartTime: Optional[Date] = None
    Timezone_1: Optional[Timezone] = Field(None, alias='Timezone')


class SourceConnectorProperties(BaseModel):
    Marketo: Optional[MarketoSourceProperties] = None
    S3: Optional[S3SourceProperties] = None
    Salesforce: Optional[SalesforceSourceProperties] = None
    ServiceNow: Optional[ServiceNowSourceProperties] = None
    Zendesk: Optional[ZendeskSourceProperties] = None


class SourceFields(RootModel[List[StringTo2048]]):
    root: List[StringTo2048]


class SourceFlowConfig(BaseModel):
    ConnectorProfileName_1: Optional[ConnectorProfileName] = Field(
        None, alias='ConnectorProfileName'
    )
    ConnectorType: SourceConnectorType
    IncrementalPullConfig_1: Optional[IncrementalPullConfig] = Field(
        None, alias='IncrementalPullConfig'
    )
    SourceConnectorProperties_1: SourceConnectorProperties = Field(
        ..., alias='SourceConnectorProperties'
    )


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    tags: TagMap


class Task(BaseModel):
    ConnectorOperator_1: Optional[ConnectorOperator] = Field(
        None, alias='ConnectorOperator'
    )
    DestinationField_1: Optional[DestinationField] = Field(
        None, alias='DestinationField'
    )
    SourceFields_1: SourceFields = Field(..., alias='SourceFields')
    TaskProperties: Optional[TaskPropertiesMap] = None
    TaskType_1: TaskType = Field(..., alias='TaskType')


class Tasks(RootModel[List[Task]]):
    root: List[Task]


class TriggerProperties(BaseModel):
    Scheduled: Optional[ScheduledTriggerProperties] = None


class UpdateAddress(BaseModel):
    Address1: Optional[String0To255] = None
    Address2: Optional[String0To255] = None
    Address3: Optional[String0To255] = None
    Address4: Optional[String0To255] = None
    City: Optional[String0To255] = None
    Country: Optional[String0To255] = None
    County: Optional[String0To255] = None
    PostalCode: Optional[String0To255] = None
    Province: Optional[String0To255] = None
    State: Optional[String0To255] = None


class UpdateAttributes(RootModel[Optional[Dict[str, String0To255]]]):
    root: Optional[Dict[str, String0To255]] = None


class UpdateProfileRequest(BaseModel):
    AccountNumber: Optional[String0To255] = None
    AdditionalInformation: Optional[String0To1000] = None
    Address: Optional[UpdateAddress] = None
    Attributes: Optional[UpdateAttributes] = None
    BillingAddress: Optional[UpdateAddress] = None
    BirthDate: Optional[String0To255] = None
    BusinessEmailAddress: Optional[String0To255] = None
    BusinessName: Optional[String0To255] = None
    BusinessPhoneNumber: Optional[String0To255] = None
    EmailAddress: Optional[String0To255] = None
    FirstName: Optional[String0To255] = None
    Gender_1: Optional[Gender] = Field(None, alias='Gender')
    GenderString: Optional[String0To255] = None
    HomePhoneNumber: Optional[String0To255] = None
    LastName: Optional[String0To255] = None
    MailingAddress: Optional[UpdateAddress] = None
    MiddleName: Optional[String0To255] = None
    MobilePhoneNumber: Optional[String0To255] = None
    PartyType_1: Optional[PartyType] = Field(None, alias='PartyType')
    PartyTypeString: Optional[String0To255] = None
    PersonalEmailAddress: Optional[String0To255] = None
    PhoneNumber: Optional[String0To255] = None
    ProfileId: Uuid
    ShippingAddress: Optional[UpdateAddress] = None


class UpdateProfileResponse(BaseModel):
    ProfileId: Uuid


class WorkflowAttributes(BaseModel):
    AppflowIntegration: Optional[AppflowIntegrationWorkflowAttributes] = None


class WorkflowList(RootModel[List[ListWorkflowsItem]]):
    root: List[ListWorkflowsItem]


class WorkflowMetrics(BaseModel):
    AppflowIntegration: Optional[AppflowIntegrationWorkflowMetrics] = None


class WorkflowStepItem(BaseModel):
    AppflowIntegration: Optional[AppflowIntegrationWorkflowStep] = None


class WorkflowStepsList(RootModel[List[WorkflowStepItem]]):
    root: List[WorkflowStepItem]


class RequestValueList(RootModel[List[String1To255]]):
    root: List[String1To255]


class Consolidation1(BaseModel):
    MatchingAttributesList_1: Optional[MatchingAttributesList] = Field(
        None, alias='MatchingAttributesList'
    )


class DomainsDomainNameIdentityResolutionJobsAutoMergingPreviewPostRequest(BaseModel):
    ConflictResolution: ConflictResolution1 = Field(
        ...,
        description='How the auto-merging process should resolve conflicts between different profiles.',
    )
    Consolidation: Consolidation1 = Field(
        ...,
        description='The matching criteria to be used during the auto-merging process. ',
    )
    MinAllowedConfidenceScoreForMerging: Optional[confloat(ge=0.0, le=1.0)] = Field(
        None,
        description='Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.',
    )


class DomainsDomainNameObjectTypesObjectTypeNamePutRequest(BaseModel):
    AllowProfileCreation: Optional[bool] = Field(
        None,
        description='Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.',
    )
    Description: constr(min_length=1, max_length=1000) = Field(
        ..., description='Description of the profile object type.'
    )
    EncryptionKey: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description='The customer-provided key to encrypt the profile object that will be created in this profile object type.',
    )
    ExpirationDays: Optional[conint(ge=1, le=1098)] = Field(
        None, description='The number of days until the data in the object expires.'
    )
    Fields: Optional[Dict[str, ObjectTypeField]] = Field(
        None, description='A map of the name and ObjectType field.'
    )
    Keys: Optional[Dict[str, ObjectTypeKeyList]] = Field(
        None,
        description='A list of unique keys that can be used to map data to the profile.',
    )
    SourceLastUpdatedTimestampFormat: Optional[constr(min_length=1, max_length=255)] = (
        Field(
            None,
            description='The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up. ',
        )
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='The tags used to organize, track, or control access for this resource.',
    )
    TemplateId: Optional[
        constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='A unique identifier for the object template. For some attributes in the request, the service will use the default value from the object template when TemplateId is present. If these attributes are present in the request, the service may return a <code>BadRequestException</code>. These attributes include: AllowProfileCreation, SourceLastUpdatedTimestampFormat, Fields, and Keys. For example, if AllowProfileCreation is set to true when TemplateId is set, the service may return a <code>BadRequestException</code>.',
    )


class ObjectFilter1(BaseModel):
    KeyName: Optional[Name] = None
    Values: Optional[RequestValueList] = None


class DomainsDomainNameProfilesObjectsPostRequest(BaseModel):
    ObjectFilter: Optional[ObjectFilter1] = Field(
        None,
        description='The filter applied to ListProfileObjects response to include profile objects with the specified index values. This filter is only supported for ObjectTypeName _asset, _case and _order.',
    )
    ObjectTypeName: constr(
        pattern=r'^[a-zA-Z_][a-zA-Z_0-9-]*$', min_length=1, max_length=255
    ) = Field(..., description='The name of the profile object type.')
    ProfileId: constr(pattern=r'[a-f0-9]{32}') = Field(
        ..., description='The unique identifier of a customer profile.'
    )


class DomainsDomainNameProfilesObjectsMergePostRequest(BaseModel):
    FieldSourceProfileIds_1: Optional[FieldSourceProfileIds] = Field(
        None,
        alias='FieldSourceProfileIds',
        description='A duplicate customer profile that is to be merged into a main profile. ',
    )
    MainProfileId: constr(pattern=r'[a-f0-9]{32}') = Field(
        ..., description='The identifier of the profile to be taken.'
    )
    ProfileIdsToBeMerged: List[Uuid] = Field(
        ...,
        description='The identifier of the profile to be merged into MainProfileId.',
        max_length=20,
        min_length=1,
    )


class AddProfileKeyRequest(BaseModel):
    KeyName: Name
    ProfileId: Uuid
    Values: RequestValueList


class AddProfileKeyResponse(BaseModel):
    KeyName: Optional[Name] = None
    Values: Optional[RequestValueList] = None


class AdditionalSearchKey(BaseModel):
    KeyName: Name
    Values: RequestValueList


class Consolidation(BaseModel):
    MatchingAttributesList_1: MatchingAttributesList = Field(
        ..., alias='MatchingAttributesList'
    )


class DeleteProfileKeyRequest(BaseModel):
    KeyName: Name
    ProfileId: Uuid
    Values: RequestValueList


class ExportingConfig(BaseModel):
    S3Exporting: Optional[S3ExportingConfig] = None


class ExportingLocation(BaseModel):
    S3Exporting: Optional[S3ExportingLocation] = None


class FieldMap(RootModel[Optional[Dict[str, ObjectTypeField]]]):
    root: Optional[Dict[str, ObjectTypeField]] = None


class FoundByKeyValue(BaseModel):
    KeyName: Optional[Name] = None
    Values: Optional[RequestValueList] = None


class GetAutoMergingPreviewRequest(BaseModel):
    ConflictResolution_1: ConflictResolution = Field(..., alias='ConflictResolution')
    Consolidation_1: Consolidation = Field(..., alias='Consolidation')
    MinAllowedConfidenceScoreForMerging: Optional[Double0To1] = None


class GetIntegrationResponse(BaseModel):
    CreatedAt: Timestamp
    DomainName: Name
    IsUnstructured: Optional[OptionalBoolean] = None
    LastUpdatedAt: Timestamp
    ObjectTypeName: Optional[TypeName] = None
    ObjectTypeNames_1: Optional[ObjectTypeNames] = Field(None, alias='ObjectTypeNames')
    Tags: Optional[TagMap] = None
    Uri: String1To255
    WorkflowId: Optional[String1To255] = None


class GetWorkflowResponse(BaseModel):
    Attributes: Optional[WorkflowAttributes] = None
    ErrorDescription: Optional[String1To255] = None
    LastUpdatedAt: Optional[Timestamp] = None
    Metrics: Optional[WorkflowMetrics] = None
    StartDate: Optional[Timestamp] = None
    Status_1: Optional[Status] = Field(None, alias='Status')
    WorkflowId: Optional[Uuid] = None
    WorkflowType_1: Optional[WorkflowType] = Field(None, alias='WorkflowType')


class GetWorkflowStepsResponse(BaseModel):
    Items: Optional[WorkflowStepsList] = None
    NextToken: Optional[Token] = None
    WorkflowId: Optional[Uuid] = None
    WorkflowType_1: Optional[WorkflowType] = Field(None, alias='WorkflowType')


class IdentityResolutionJob(BaseModel):
    DomainName: Optional[Name] = None
    ExportingLocation_1: Optional[ExportingLocation] = Field(
        None, alias='ExportingLocation'
    )
    JobEndTime: Optional[Timestamp] = None
    JobId: Optional[Uuid] = None
    JobStartTime: Optional[Timestamp] = None
    JobStats_1: Optional[JobStats] = Field(None, alias='JobStats')
    Message: Optional[StringTo2048] = None
    Status: Optional[IdentityResolutionJobStatus] = None


class IdentityResolutionJobsList(RootModel[List[IdentityResolutionJob]]):
    root: List[IdentityResolutionJob]


class KeyMap(RootModel[Optional[Dict[str, ObjectTypeKeyList]]]):
    root: Optional[Dict[str, ObjectTypeKeyList]] = None


class ListDomainItem(BaseModel):
    CreatedAt: Timestamp
    DomainName: Name
    LastUpdatedAt: Timestamp
    Tags: Optional[TagMap] = None


class ListIdentityResolutionJobsResponse(BaseModel):
    IdentityResolutionJobsList_1: Optional[IdentityResolutionJobsList] = Field(
        None, alias='IdentityResolutionJobsList'
    )
    NextToken: Optional[Token] = None


class ListIntegrationItem(BaseModel):
    CreatedAt: Timestamp
    DomainName: Name
    IsUnstructured: Optional[OptionalBoolean] = None
    LastUpdatedAt: Timestamp
    ObjectTypeName: Optional[TypeName] = None
    ObjectTypeNames_1: Optional[ObjectTypeNames] = Field(None, alias='ObjectTypeNames')
    Tags: Optional[TagMap] = None
    Uri: String1To255
    WorkflowId: Optional[String1To255] = None


class ListProfileObjectTypeItem(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    Description: Text
    LastUpdatedAt: Optional[Timestamp] = None
    ObjectTypeName: TypeName
    Tags: Optional[TagMap] = None


class ListProfileObjectTypeTemplatesResponse(BaseModel):
    Items: Optional[ProfileObjectTypeTemplateList] = None
    NextToken: Optional[Token] = None


class ListProfileObjectsResponse(BaseModel):
    Items: Optional[ProfileObjectList] = None
    NextToken: Optional[Token] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class ListWorkflowsResponse(BaseModel):
    Items: Optional[WorkflowList] = None
    NextToken: Optional[Token] = None


class MatchItem(BaseModel):
    ConfidenceScore: Optional[Double] = None
    MatchId: Optional[String1To255] = None
    ProfileIds: Optional[ProfileIdList] = None


class MatchesList(RootModel[List[MatchItem]]):
    root: List[MatchItem]


class MergeProfilesRequest(BaseModel):
    FieldSourceProfileIds_1: Optional[FieldSourceProfileIds] = Field(
        None, alias='FieldSourceProfileIds'
    )
    MainProfileId: Uuid
    ProfileIdsToBeMerged: ProfileIdToBeMergedList


class ObjectFilter(BaseModel):
    KeyName: Name
    Values: RequestValueList


class ProfileObjectTypeList(RootModel[List[ListProfileObjectTypeItem]]):
    root: List[ListProfileObjectTypeItem]


class PutIntegrationResponse(BaseModel):
    CreatedAt: Timestamp
    DomainName: Name
    IsUnstructured: Optional[OptionalBoolean] = None
    LastUpdatedAt: Timestamp
    ObjectTypeName: Optional[TypeName] = None
    ObjectTypeNames_1: Optional[ObjectTypeNames] = Field(None, alias='ObjectTypeNames')
    Tags: Optional[TagMap] = None
    Uri: String1To255
    WorkflowId: Optional[String1To255] = None


class PutProfileObjectTypeRequest(BaseModel):
    AllowProfileCreation: Optional[Boolean] = None
    Description: Text
    EncryptionKey_1: Optional[EncryptionKey] = Field(None, alias='EncryptionKey')
    ExpirationDays: Optional[ExpirationDaysInteger] = None
    Fields: Optional[FieldMap] = None
    Keys: Optional[KeyMap] = None
    SourceLastUpdatedTimestampFormat: Optional[String1To255] = None
    Tags: Optional[TagMap] = None
    TemplateId: Optional[Name] = None


class PutProfileObjectTypeResponse(BaseModel):
    AllowProfileCreation: Optional[Boolean] = None
    CreatedAt: Optional[Timestamp] = None
    Description: Text
    EncryptionKey_1: Optional[EncryptionKey] = Field(None, alias='EncryptionKey')
    ExpirationDays: Optional[ExpirationDaysInteger] = None
    Fields: Optional[FieldMap] = None
    Keys: Optional[KeyMap] = None
    LastUpdatedAt: Optional[Timestamp] = None
    ObjectTypeName: TypeName
    SourceLastUpdatedTimestampFormat: Optional[String1To255] = None
    Tags: Optional[TagMap] = None
    TemplateId: Optional[Name] = None


class TriggerConfig(BaseModel):
    TriggerProperties_1: Optional[TriggerProperties] = Field(
        None, alias='TriggerProperties'
    )
    TriggerType_1: TriggerType = Field(..., alias='TriggerType')


class AdditionalSearchKeysList(RootModel[List[AdditionalSearchKey]]):
    root: List[AdditionalSearchKey] = Field(..., max_length=4, min_length=1)


class FoundByList(RootModel[List[FoundByKeyValue]]):
    root: List[FoundByKeyValue] = Field(..., max_length=5, min_length=1)


class FlowDefinition1(BaseModel):
    Description: Optional[FlowDescription] = None
    FlowName_1: Optional[FlowName] = Field(None, alias='FlowName')
    KmsArn_1: Optional[KmsArn] = Field(None, alias='KmsArn')
    SourceFlowConfig_1: Optional[SourceFlowConfig] = Field(
        None, alias='SourceFlowConfig'
    )
    Tasks_1: Optional[Tasks] = Field(None, alias='Tasks')
    TriggerConfig_1: Optional[TriggerConfig] = Field(None, alias='TriggerConfig')


class DomainsDomainNameIntegrationsPutRequest(BaseModel):
    FlowDefinition: Optional[FlowDefinition1] = Field(
        None,
        description='The configurations that control how Customer Profiles retrieves data from the source, Amazon AppFlow. Customer Profiles uses this information to create an AppFlow flow on behalf of customers.',
    )
    ObjectTypeName: Optional[
        constr(pattern=r'^[a-zA-Z_][a-zA-Z_0-9-]*$', min_length=1, max_length=255)
    ] = Field(None, description='The name of the profile object type.')
    ObjectTypeNames: Optional[Dict[str, TypeName]] = Field(
        None,
        description='A map in which each key is an event type from an external application such as Segment or Shopify, and each value is an <code>ObjectTypeName</code> (template) used to ingest the event. It supports the following event types: <code>SegmentIdentify</code>, <code>ShopifyCreateCustomers</code>, <code>ShopifyUpdateCustomers</code>, <code>ShopifyCreateDraftOrders</code>, <code>ShopifyUpdateDraftOrders</code>, <code>ShopifyCreateOrders</code>, and <code>ShopifyUpdatedOrders</code>.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='The tags used to organize, track, or control access for this resource.',
    )
    Uri: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description='The URI of the S3 bucket or any other type of data source.'
    )


class DomainsDomainNameProfilesSearchPostRequest(BaseModel):
    AdditionalSearchKeys: Optional[List[AdditionalSearchKey]] = Field(
        None,
        description='A list of <code>AdditionalSearchKey</code> objects that are each searchable identifiers of a profile. Each <code>AdditionalSearchKey</code> object contains a <code>KeyName</code> and a list of <code>Values</code> associated with that specific key (i.e., a key-value(s) pair). These additional search keys will be used in conjunction with the <code>LogicalOperator</code> and the required <code>KeyName</code> and <code>Values</code> parameters to search for profiles that satisfy the search criteria. ',
        max_length=4,
        min_length=1,
    )
    KeyName: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=1, max_length=64) = Field(
        ...,
        description='A searchable identifier of a customer profile. The predefined keys you can use to search include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.',
    )
    LogicalOperator_1: Optional[LogicalOperator] = Field(
        None,
        alias='LogicalOperator',
        description='<p>Relationship between all specified search keys that will be used to search for profiles. This includes the required <code>KeyName</code> and <code>Values</code> parameters as well as any key-value(s) pairs specified in the <code>AdditionalSearchKeys</code> list.</p> <p>This parameter influences which profiles will be returned in the response in the following manner:</p> <ul> <li> <p> <code>AND</code> - The response only includes profiles that match all of the search keys.</p> </li> <li> <p> <code>OR</code> - The response includes profiles that match at least one of the search keys.</p> </li> </ul> <p>The <code>OR</code> relationship is the default behavior if this parameter is not included in the request.</p>',
    )
    Values: List[String1To255] = Field(..., description='A list of key values.')


class AutoMerging(BaseModel):
    ConflictResolution_1: Optional[ConflictResolution] = Field(
        None, alias='ConflictResolution'
    )
    Consolidation_1: Optional[Consolidation] = Field(None, alias='Consolidation')
    Enabled: OptionalBoolean
    MinAllowedConfidenceScoreForMerging: Optional[Double0To1] = None


class DomainList(RootModel[List[ListDomainItem]]):
    root: List[ListDomainItem]


class FlowDefinition(BaseModel):
    Description: Optional[FlowDescription] = None
    FlowName_1: FlowName = Field(..., alias='FlowName')
    KmsArn_1: KmsArn = Field(..., alias='KmsArn')
    SourceFlowConfig_1: SourceFlowConfig = Field(..., alias='SourceFlowConfig')
    Tasks_1: Tasks = Field(..., alias='Tasks')
    TriggerConfig_1: TriggerConfig = Field(..., alias='TriggerConfig')


class GetIdentityResolutionJobResponse(BaseModel):
    AutoMerging_1: Optional[AutoMerging] = Field(None, alias='AutoMerging')
    DomainName: Optional[Name] = None
    ExportingLocation_1: Optional[ExportingLocation] = Field(
        None, alias='ExportingLocation'
    )
    JobEndTime: Optional[Timestamp] = None
    JobExpirationTime: Optional[Timestamp] = None
    JobId: Optional[Uuid] = None
    JobStartTime: Optional[Timestamp] = None
    JobStats_1: Optional[JobStats] = Field(None, alias='JobStats')
    LastUpdatedAt: Optional[Timestamp] = None
    Message: Optional[StringTo2048] = None
    Status: Optional[IdentityResolutionJobStatus] = None


class GetMatchesResponse(BaseModel):
    MatchGenerationDate: Optional[Timestamp] = None
    Matches: Optional[MatchesList] = None
    NextToken: Optional[Token] = None
    PotentialMatches: Optional[MatchesNumber] = None


class GetProfileObjectTypeResponse(BaseModel):
    AllowProfileCreation: Optional[Boolean] = None
    CreatedAt: Optional[Timestamp] = None
    Description: Text
    EncryptionKey_1: Optional[EncryptionKey] = Field(None, alias='EncryptionKey')
    ExpirationDays: Optional[ExpirationDaysInteger] = None
    Fields: Optional[FieldMap] = None
    Keys: Optional[KeyMap] = None
    LastUpdatedAt: Optional[Timestamp] = None
    ObjectTypeName: TypeName
    SourceLastUpdatedTimestampFormat: Optional[String1To255] = None
    Tags: Optional[TagMap] = None
    TemplateId: Optional[Name] = None


class GetProfileObjectTypeTemplateResponse(BaseModel):
    AllowProfileCreation: Optional[Boolean] = None
    Fields: Optional[FieldMap] = None
    Keys: Optional[KeyMap] = None
    SourceLastUpdatedTimestampFormat: Optional[String1To255] = None
    SourceName: Optional[Name] = None
    SourceObject: Optional[Name] = None
    TemplateId: Optional[Name] = None


class IntegrationList(RootModel[List[ListIntegrationItem]]):
    root: List[ListIntegrationItem]


class ListAccountIntegrationsResponse(BaseModel):
    Items: Optional[IntegrationList] = None
    NextToken: Optional[Token] = None


class ListDomainsResponse(BaseModel):
    Items: Optional[DomainList] = None
    NextToken: Optional[Token] = None


class ListIntegrationsResponse(BaseModel):
    Items: Optional[IntegrationList] = None
    NextToken: Optional[Token] = None


class ListProfileObjectTypesResponse(BaseModel):
    Items: Optional[ProfileObjectTypeList] = None
    NextToken: Optional[Token] = None


class ListProfileObjectsRequest(BaseModel):
    ObjectFilter_1: Optional[ObjectFilter] = Field(None, alias='ObjectFilter')
    ObjectTypeName: TypeName
    ProfileId: Uuid


class MatchingRequest(BaseModel):
    AutoMerging_1: Optional[AutoMerging] = Field(None, alias='AutoMerging')
    Enabled: OptionalBoolean
    ExportingConfig_1: Optional[ExportingConfig] = Field(None, alias='ExportingConfig')
    JobSchedule_1: Optional[JobSchedule] = Field(None, alias='JobSchedule')


class MatchingResponse(BaseModel):
    AutoMerging_1: Optional[AutoMerging] = Field(None, alias='AutoMerging')
    Enabled: Optional[OptionalBoolean] = None
    ExportingConfig_1: Optional[ExportingConfig] = Field(None, alias='ExportingConfig')
    JobSchedule_1: Optional[JobSchedule] = Field(None, alias='JobSchedule')


class Profile(BaseModel):
    AccountNumber: Optional[String1To255] = None
    AdditionalInformation: Optional[String1To1000] = None
    Address_1: Optional[Address] = Field(None, alias='Address')
    Attributes_1: Optional[Attributes] = Field(None, alias='Attributes')
    BillingAddress: Optional[Address] = None
    BirthDate: Optional[String1To255] = None
    BusinessEmailAddress: Optional[String1To255] = None
    BusinessName: Optional[String1To255] = None
    BusinessPhoneNumber: Optional[String1To255] = None
    EmailAddress: Optional[String1To255] = None
    FirstName: Optional[String1To255] = None
    FoundByItems: Optional[FoundByList] = None
    Gender_1: Optional[Gender] = Field(None, alias='Gender')
    GenderString: Optional[String1To255] = None
    HomePhoneNumber: Optional[String1To255] = None
    LastName: Optional[String1To255] = None
    MailingAddress: Optional[Address] = None
    MiddleName: Optional[String1To255] = None
    MobilePhoneNumber: Optional[String1To255] = None
    PartyType_1: Optional[PartyType] = Field(None, alias='PartyType')
    PartyTypeString: Optional[String1To255] = None
    PersonalEmailAddress: Optional[String1To255] = None
    PhoneNumber: Optional[String1To255] = None
    ProfileId: Optional[Uuid] = None
    ShippingAddress: Optional[Address] = None


class ProfileList(RootModel[List[Profile]]):
    root: List[Profile]


class PutIntegrationRequest(BaseModel):
    FlowDefinition_1: Optional[FlowDefinition] = Field(None, alias='FlowDefinition')
    ObjectTypeName: Optional[TypeName] = None
    ObjectTypeNames_1: Optional[ObjectTypeNames] = Field(None, alias='ObjectTypeNames')
    Tags: Optional[TagMap] = None
    Uri: Optional[String1To255] = None


class SearchProfilesRequest(BaseModel):
    AdditionalSearchKeys: Optional[AdditionalSearchKeysList] = None
    KeyName: Name
    LogicalOperator_1: Optional[LogicalOperator] = Field(None, alias='LogicalOperator')
    Values: RequestValueList


class SearchProfilesResponse(BaseModel):
    Items: Optional[ProfileList] = None
    NextToken: Optional[Token] = None


class UpdateDomainRequest(BaseModel):
    DeadLetterQueueUrl: Optional[SqsQueueUrl] = None
    DefaultEncryptionKey: Optional[EncryptionKey] = None
    DefaultExpirationDays: Optional[ExpirationDaysInteger] = None
    Matching: Optional[MatchingRequest] = None
    Tags: Optional[TagMap] = None


class UpdateDomainResponse(BaseModel):
    CreatedAt: Timestamp
    DeadLetterQueueUrl: Optional[SqsQueueUrl] = None
    DefaultEncryptionKey: Optional[EncryptionKey] = None
    DefaultExpirationDays: Optional[ExpirationDaysInteger] = None
    DomainName: Name
    LastUpdatedAt: Timestamp
    Matching: Optional[MatchingResponse] = None
    Tags: Optional[TagMap] = None


class Matching(BaseModel):
    AutoMerging_1: Optional[AutoMerging] = Field(None, alias='AutoMerging')
    Enabled: Optional[OptionalBoolean] = None
    ExportingConfig_1: Optional[ExportingConfig] = Field(None, alias='ExportingConfig')
    JobSchedule_1: Optional[JobSchedule] = Field(None, alias='JobSchedule')


class DomainsDomainNamePostRequest(BaseModel):
    DeadLetterQueueUrl: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description='The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.',
    )
    DefaultEncryptionKey: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description='The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.',
    )
    DefaultExpirationDays: conint(ge=1, le=1098) = Field(
        ...,
        description='The default number of days until the data within the domain expires.',
    )
    Matching_1: Optional[Matching] = Field(
        None,
        alias='Matching',
        description='The flag that enables the matching process of duplicate profiles.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='The tags used to organize, track, or control access for this resource.',
    )


class DomainsDomainNamePutRequest(BaseModel):
    DeadLetterQueueUrl: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description='The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. If specified as an empty string, it will clear any existing value. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.',
    )
    DefaultEncryptionKey: Optional[constr(min_length=0, max_length=255)] = Field(
        None,
        description='The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage. If specified as an empty string, it will clear any existing value.',
    )
    DefaultExpirationDays: Optional[conint(ge=1, le=1098)] = Field(
        None,
        description='The default number of days until the data within the domain expires.',
    )
    Matching_1: Optional[Matching] = Field(
        None,
        alias='Matching',
        description='The flag that enables the matching process of duplicate profiles.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='The tags used to organize, track, or control access for this resource.',
    )


class AppflowIntegration(BaseModel):
    Batches_1: Optional[Batches] = Field(None, alias='Batches')
    FlowDefinition_1: FlowDefinition = Field(..., alias='FlowDefinition')


class CreateDomainRequest(BaseModel):
    DeadLetterQueueUrl: Optional[SqsQueueUrl] = None
    DefaultEncryptionKey: Optional[EncryptionKey] = None
    DefaultExpirationDays: ExpirationDaysInteger
    Matching: Optional[MatchingRequest] = None
    Tags: Optional[TagMap] = None


class CreateDomainResponse(BaseModel):
    CreatedAt: Timestamp
    DeadLetterQueueUrl: Optional[SqsQueueUrl] = None
    DefaultEncryptionKey: Optional[EncryptionKey] = None
    DefaultExpirationDays: ExpirationDaysInteger
    DomainName: Name
    LastUpdatedAt: Timestamp
    Matching: Optional[MatchingResponse] = None
    Tags: Optional[TagMap] = None


class GetDomainResponse(BaseModel):
    CreatedAt: Timestamp
    DeadLetterQueueUrl: Optional[SqsQueueUrl] = None
    DefaultEncryptionKey: Optional[EncryptionKey] = None
    DefaultExpirationDays: Optional[ExpirationDaysInteger] = None
    DomainName: Name
    LastUpdatedAt: Timestamp
    Matching: Optional[MatchingResponse] = None
    Stats: Optional[DomainStats] = None
    Tags: Optional[TagMap] = None


class IntegrationConfig(BaseModel):
    AppflowIntegration_1: Optional[AppflowIntegration] = Field(
        None, alias='AppflowIntegration'
    )


class DomainsDomainNameWorkflowsIntegrationsPostRequest(BaseModel):
    IntegrationConfig_1: IntegrationConfig = Field(
        ...,
        alias='IntegrationConfig',
        description='Configuration data for integration workflow.',
    )
    ObjectTypeName: constr(
        pattern=r'^[a-zA-Z_][a-zA-Z_0-9-]*$', min_length=1, max_length=255
    ) = Field(..., description='The name of the profile object type.')
    RoleArn: constr(pattern=r'arn:aws:iam:.*:[0-9]+:.*', max_length=512) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the IAM role. Customer Profiles assumes this role to create resources on your behalf as part of workflow execution.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='The tags used to organize, track, or control access for this resource.',
    )
    WorkflowType_1: WorkflowType = Field(
        ...,
        alias='WorkflowType',
        description='The type of workflow. The only supported value is APPFLOW_INTEGRATION.',
    )


class CreateIntegrationWorkflowRequest(BaseModel):
    IntegrationConfig_1: IntegrationConfig = Field(..., alias='IntegrationConfig')
    ObjectTypeName: TypeName
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    Tags: Optional[TagMap] = None
    WorkflowType_1: WorkflowType = Field(..., alias='WorkflowType')
